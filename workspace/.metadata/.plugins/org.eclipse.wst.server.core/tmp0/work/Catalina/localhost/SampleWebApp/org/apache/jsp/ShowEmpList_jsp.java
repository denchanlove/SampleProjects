/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.32
 * Generated at: 2017-02-28 00:17:43 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;

public final class ShowEmpList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\r\n");
      out.write("  <title>SlickGrid example 1: Basic grid</title>\r\n");
      out.write("  <link rel=\"stylesheet\" href=\"C:/Users/hsakai.SEV/Downloads/SlickGrid-2.3.2/SlickGrid-2.3.2/slick.grid.css\" type=\"text/css\"/>\r\n");
      out.write("  <link rel=\"stylesheet\" href=\"C:/Users/hsakai.SEV/Downloads/SlickGrid-2.3.2/SlickGrid-2.3.2/css/smoothness/jquery-ui-1.11.3.custom.css\" type=\"text/css\"/>\r\n");
      out.write("  <link rel=\"stylesheet\" href=\"C:/Users/hsakai.SEV/Downloads/SlickGrid-2.3.2/SlickGrid-2.3.2/examples/examples.css\" type=\"text/css\"/>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<table width=\"100%\">\r\n");
      out.write("  <tr>\r\n");
      out.write("    <td valign=\"top\" width=\"50%\">\r\n");
      out.write("      <div id=\"myGrid\" style=\"width:600px;height:500px;\"></div>\r\n");
      out.write("    </td>\r\n");
      out.write("  </tr>\r\n");
      out.write("</table>\r\n");
      out.write("\r\n");
      out.write("<script src=\"C:/Users/hsakai.SEV/Downloads/SlickGrid-2.3.2/SlickGrid-2.3.2/lib/jquery-1.11.2.min.js\"></script>\r\n");
      out.write("<script src=\"C:/Users/hsakai.SEV/Downloads/SlickGrid-2.3.2/SlickGrid-2.3.2/lib/jquery.event.drag-2.3.0.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<script src=\"C:/Users/hsakai.SEV/Downloads/SlickGrid-2.3.2/SlickGrid-2.3.2/slick.core.js\"></script>\r\n");
      out.write("<script src=\"C:/Users/hsakai.SEV/Downloads/SlickGrid-2.3.2/SlickGrid-2.3.2/slick.grid.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("  var grid;\r\n");
      out.write("  var columns = [\r\n");
      out.write("    {id: \"title\", name: \"Title\", field: \"title\"},\r\n");
      out.write("    {id: \"duration\", name: \"Duration\", field: \"duration\"},\r\n");
      out.write("    {id: \"%\", name: \"% Complete\", field: \"percentComplete\"},\r\n");
      out.write("    {id: \"start\", name: \"Start\", field: \"start\"},\r\n");
      out.write("    {id: \"finish\", name: \"Finish\", field: \"finish\"},\r\n");
      out.write("    {id: \"effort-driven\", name: \"Effort Driven\", field: \"effortDriven\"}\r\n");
      out.write("  ];\r\n");
      out.write("\r\n");
      out.write("  var options = {\r\n");
      out.write("    enableCellNavigation: true,\r\n");
      out.write("    enableColumnReorder: false\r\n");
      out.write("  };\r\n");
      out.write("\r\n");
      out.write("  $(function () {\r\n");
      out.write("    var data = [];\r\n");
      out.write("    for (var i = 0; i < 500; i++) {\r\n");
      out.write("      data[i] = {\r\n");
      out.write("        title: \"Task \" + i,\r\n");
      out.write("        duration: \"5 days\",\r\n");
      out.write("        percentComplete: Math.round(Math.random() * 100),\r\n");
      out.write("        start: \"01/01/2009\",\r\n");
      out.write("        finish: \"01/05/2009\",\r\n");
      out.write("        effortDriven: (i % 5 == 0)\r\n");
      out.write("      };\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    grid = new Slick.Grid(\"#myGrid\", data, columns, options);\r\n");
      out.write("  })\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
